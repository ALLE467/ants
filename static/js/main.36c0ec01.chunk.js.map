{"version":3,"sources":["components/Dot.tsx","components/Dock.tsx","logic/Trig.ts","logic/Ant.ts","App.tsx","index.tsx"],"names":["Dot","posX","posY","radius","opacity","className","style","height","width","left","top","Dock","fields","update","useState","visible","setVisibility","id","map","obj","i","key","label","value","type","min","max","step","onChange","e","Number","target","onClick","v","fullTurn","Math","PI","vecToAng","vec","atan","angToVec","angle","length","cos","sin","degToRad","deg","Ant","options","velX","velY","_agility","speed","minSpeed","maxSpeed","distancingRange","distancingFactor","this","random","window","innerWidth","innerHeight","agility","vel","ang","neighbours","ant","posDiff","vec0","vec1","loopSize","getVecDiffInLoopingGrid","pos","distance","filter","push","pushes","getPushes","forEach","pushAngle","pushVector","calcPush","isNaN","reducer","state","action","ants","mouseDown","mousePos","touches","touch","updateVelocity","updatePosition","setting","antSettings","pop","item","clientX","clientY","App","useReducer","dispatch","React","useEffect","ticker","setInterval","clearInterval","onMouseDown","onMouseMove","onMouseUp","onTouchStart","onTouchMove","onTouchEnd","cursor","node","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.36c0ec01.chunk.js","sourcesContent":["import React from 'react';\nimport './Dot.css';\n\ninterface Props {\n  posX: number,\n  posY: number,\n  radius: number,\n  opacity?: number\n}\n\nconst Dot: React.FC<Props> = ({ posX, posY, radius, opacity }) => {\n  return <div\n    className='dot'\n    style={{\n      height: (radius *2) +'px',\n      width: (radius *2) +'px',\n      left: (posX -radius) +'px',\n      top: (posY -radius) +'px',\n      opacity\n    }}\n  ></div>;\n};\n\nexport default Dot;\n","import React, { useState, Fragment } from 'react';\nimport './Dock.scss';\n\ninterface Props {\n  fields: {\n    label?: string,\n    key: string,\n    value: number,\n    min?: number,\n    max?: number,\n    step?: number\n  }[],\n  update(feild: string, value: number): void\n}\n\nconst Dock: React.FC<Props> = ({ fields, update }) => {\n  const [visible, setVisibility] = useState(false);\n\n  return <div id='dock'>\n    <div\n      className={'ctrl' +(visible ? ' open' : ' closed')}\n    >\n      {fields.map((obj, i) => <Fragment key={i}>\n        <label>{obj.label || obj.key} <span className='value'>{obj.value}</span></label>\n        <input\n          type='range'\n          value={obj.value}\n          min={obj.min}\n          max={obj.max}\n          step={obj.step}\n          onChange={e => update(obj.key, Number(e.target.value))}\n        />\n      </Fragment>)}\n    </div>\n    <button\n      className={'door' +(visible ? ' open' : ' closed')}\n      onClick={() => setVisibility(v => !v)}\n    >â‰¡</button>\n  </div>;\n};\n\nexport default Dock;\n","export const fullTurn = Math.PI *2;\n\nexport const vecToAng = (vec: [number, number]): number =>\n  (fullTurn +Math.atan(vec[1] /vec[0]) +(vec[0] < 0 ? Math.PI : 0)) %fullTurn;\n\nexport const angToVec = (angle: number, length = 1): [number, number] =>\n  [Math.cos(angle) *length, Math.sin(angle) *length];\n\nexport const getVecMagnitude = (vec: [number, number]): number =>\n  (vec[0] **2 +vec[1] **2) **.5;\n\nexport const getVecSum = (...vectors: [number, number][]): [number, number] => {\n  const sum: [number, number] = [0, 0];\n  vectors.forEach(vec => {\n    sum[0] += vec[0];\n    sum[1] += vec[1];\n  });\n  return sum;\n};\n\nexport const getVecDiffInLoopingGrid = (\n  vec0: [number, number],\n  vec1: [number, number],\n  loopSize: [number, number]\n): [number, number] => {\n  const posDiff: [number, number] = [vec1[0] -vec0[0], vec1[1] -vec0[1]];\n  if (posDiff[0] > loopSize[0] /2) posDiff[0] -= loopSize[0];\n  if (posDiff[1] > loopSize[1] /2) posDiff[1] -= loopSize[1];\n  return posDiff;\n}\n\nexport const radToDeg = (rad: number): number => rad /Math.PI *180;\nexport const degToRad = (deg: number): number => deg *Math.PI /180;\n","import {\n  vecToAng,\n  angToVec,\n  degToRad,\n  getVecMagnitude,\n  getVecDiffInLoopingGrid\n} from './Trig';\n\n\ninterface Push {\n  posDiff: [number, number],\n  distance: number\n}\n\n\nexport default class Ant {\n  posX: number;\n  posY: number;\n  velX = 0;\n  velY = 0;\n\n  get pos(): [number, number] {\n    return [this.posX, this.posY];\n  }\n\n  set pos(vec: [number, number]) {\n    this.posX = vec[0];\n    this.posY = vec[1];\n  }\n\n  get vel(): [number, number] {\n    return [this.velX, this.velY];\n  }\n\n  set vel(vec: [number, number]) {\n    this.velX = vec[0];\n    this.velY = vec[1];\n  }\n\n  get angle(): number {\n    return vecToAng(this.vel);\n  }\n\n  _agility = degToRad(30);\n\n  set agility(ang: number) {\n    this._agility = degToRad(ang);\n  }\n\n  speed: number;\n  minSpeed: number;\n  maxSpeed: number;\n  distancingRange: number;\n  distancingFactor: number;\n\n  constructor(options: {\n    posX?: number,\n    posY?: number,\n    agility: number,\n    speed: number,\n    minSpeed: number,\n    maxSpeed: number,\n    distancingRange: number,\n    distancingFactor: number\n  }) {\n    this.posX = options.posX || (Math.random() *window.innerWidth);\n    this.posY = options.posY || (Math.random() *window.innerHeight);\n    this.agility = options.agility;\n    this.speed = options.speed;\n    this.minSpeed = options.minSpeed;\n    this.maxSpeed = options.maxSpeed;\n    this.distancingRange = options.distancingRange;\n    this.distancingFactor = options.distancingFactor;\n  }\n\n  getPushes(neighbours: (Ant | { pos: [number, number] })[]): Push[] {\n    return neighbours.map((ant): Push | null => {\n      if (ant !== this) {\n        const posDiff = getVecDiffInLoopingGrid(this.pos, ant.pos, [window.innerWidth, window.innerHeight]);\n        // avoid calculating the hypotenuse(magnitude) if not necessary\n        if (posDiff[0] <= this.distancingRange && posDiff[1] <= this.distancingRange) {\n          const distance = getVecMagnitude(posDiff);\n          if (distance <= this.distancingRange) return { posDiff, distance };\n          else return null;\n        } else return null;\n      } else return null;\n    }).filter(push => push !== null) as Push[];\n  }\n\n  calcPush(distance: number) {\n    return Math.min(this.minSpeed +this.distancingFactor *this.distancingRange /distance -1, this.maxSpeed);\n  }\n\n  updatePosition(): Ant {\n    this.posX += window.innerWidth +this.velX;\n    this.posY += window.innerHeight +this.velY;\n    this.posX %= window.innerWidth;\n    this.posY %= window.innerHeight;\n    return this;\n  };\n\n  updateVelocity(neighbours: (Ant | { pos: [number, number] })[]): Ant {\n    const pushes = this.getPushes(neighbours);\n    if (pushes.length > 0) {\n      const vel: [number, number] = [0, 0];\n      pushes.forEach(push => {\n        const pushAngle = vecToAng(push.posDiff) +Math.PI;\n        const pushVector = angToVec(pushAngle, this.calcPush(push.distance));\n        vel[0] += pushVector[0];\n        vel[1] += pushVector[1];\n      });\n      this.vel = vel;\n    } else {\n      let angle = this.angle;\n      if (isNaN(angle)) angle = 0;\n      angle += (Math.random() -.5) *2 *this._agility;\n      [this.velX, this.velY] = angToVec(angle, this.speed);\n    }\n    return this;\n  };\n}\n","import React, { useReducer, TouchList } from 'react';\nimport Dot from './components/Dot';\nimport Dock from './components/Dock';\nimport Ant from './logic/Ant';\nimport './App.scss';\n\n\nconst RENDER_RATE = 60;\n\ntype Touch = [number, number];\n\ninterface State {\n  ants: Ant[],\n  antSettings: {\n    agility: number,\n    speed: number,\n    minSpeed: number,\n    maxSpeed: number,\n    distancingRange: number,\n    distancingFactor: number\n  },\n  mousePos: [number, number],\n  mouseDown: boolean,\n  touches: Touch[]\n}\n\ntype AntSetting = 'agility' | 'speed' | 'minSpeed' | 'maxSpeed' | 'distancingRange' | 'distancingFactor';\n\ninterface Action {\n  type: 'updateAntVelocities'\n      | 'updateAntPositions'\n      | 'updateAntSetting'\n      | 'mouseDown'\n      | 'mouseUp'\n      | 'mouseMove'\n      | 'touch',\n  pos?: [number, number],\n  setting?: string,\n  value?: number,\n  touches?: TouchList\n}\n\n\nconst reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case 'updateAntVelocities':\n      const neighbours: (Ant | { pos: [number, number] })[] = [...state.ants];\n      if (state.mouseDown) neighbours.push({ pos: state.mousePos });\n      state.touches.forEach(touch => neighbours.push({ pos: touch }));\n      state.ants.forEach(ant => ant.updateVelocity(neighbours));\n      return { ...state };\n    case 'updateAntPositions':\n      state.ants.forEach(ant => ant.updatePosition());\n      return { ...state };\n    case 'updateAntSetting':\n      if (action.setting && action.value) {\n        if (action.setting === 'count') {\n          while (state.ants.length < action.value) state.ants.push(new Ant(state.antSettings));\n          while (state.ants.length > action.value) state.ants.pop();\n          return { ...state };\n        } else {\n          const setting = action.setting as AntSetting;\n          const value = action.value as number;\n          state.antSettings[setting] = value;\n          /*if (['speed', 'minSpeed', 'maxSpeed'].indexOf(setting) !== -1) {\n            state.antSettings.minSpeed = Math.min(\n              state.antSettings.minSpeed,\n              state.antSettings.maxSpeed,\n              state.antSettings.speed,\n            );\n            state.antSettings.maxSpeed = Math.max(\n              state.antSettings.minSpeed,\n              state.antSettings.maxSpeed,\n              state.antSettings.speed\n            );\n            state.antSettings.speed = Math.min(\n              Math.max(\n                state.antSettings.speed,\n                state.antSettings.minSpeed\n              ),\n              state.antSettings.maxSpeed\n            );\n            state.ants.forEach(ant => {\n              ant.speed = state.antSettings.speed;\n              ant.minSpeed = state.antSettings.minSpeed;\n              ant.maxSpeed = state.antSettings.maxSpeed;\n            });\n          } else {*/\n            state.ants.forEach(ant => { ant[setting] = value; });\n          //}\n          return { ...state }\n        }\n      }\n      break;\n    case 'mouseDown':\n      return { ...state, mouseDown: true, mousePos: action.pos || state.mousePos }\n    case 'mouseUp':\n      return { ...state, mouseDown: false, mousePos: action.pos || state.mousePos }\n    case 'mouseMove':\n      if (action.pos) return { ...state, mousePos: action.pos }\n      break;\n    case 'touch':\n      state.touches = [];\n      if (action.touches) {\n        for (let i=0; i < action.touches.length; i++) {\n          const item = action.touches.item(i);\n          if (item) state.touches.push([item.clientX, item.clientY]);\n        }\n      }\n      return { ...state };\n  }\n  return state;\n};\n\n\nconst App: React.FC = () => {\n  const [state, dispatch] = useReducer(reducer, {\n    ants: [],\n    antSettings: {\n      agility: 30,\n      speed: 6,\n      minSpeed: 1,\n      maxSpeed: 10,\n      distancingRange: 100,\n      distancingFactor: 2,\n    },\n    mousePos: [0, 0],\n    mouseDown: false,\n    touches: []\n  });\n\n  React.useEffect(() => {\n    const ticker = setInterval(() => {\n      dispatch({ type: 'updateAntPositions' });\n      dispatch({ type: 'updateAntVelocities' });\n    }, 1000 /RENDER_RATE);\n\n    dispatch({\n      type: 'updateAntSetting',\n      setting: 'count',\n      value: 30\n    });\n\n    return () => clearInterval(ticker);\n  }, []);\n\n  return <div\n    id='app'\n  >\n    <div id='canvas'\n      onMouseDown={e => dispatch({ type: 'mouseDown', pos: [e.clientX, e.clientY] })}\n      onMouseMove={e => dispatch({ type: 'mouseMove', pos: [e.clientX, e.clientY] })}\n      onMouseUp={() => dispatch({ type: 'mouseUp' })}\n\n      onTouchStart={e => dispatch({ type: 'touch', touches: e.touches })}\n      onTouchMove={e => dispatch({ type: 'touch', touches: e.touches })}\n      onTouchEnd={() => dispatch({ type: 'touch' })}\n\n      style={{\n        cursor: state.mouseDown ? 'grab' : 'pointer'\n      }}\n    >\n      {state.ants.map((node, i) => <Dot\n        key={i}\n        posX={node.posX}\n        posY={node.posY}\n        radius={5}\n      />)}\n      {state.mouseDown && <Dot\n        posX={state.mousePos[0]}\n        posY={state.mousePos[1]}\n        radius={state.antSettings.distancingRange}\n        opacity={.1}\n      />}\n      {state.touches.map(touch => <Dot\n        posX={touch[0]}\n        posY={touch[1]}\n        radius={state.antSettings.distancingRange}\n        opacity={.1}\n      />)}\n    </div>\n    <Dock\n      fields={[\n        {\n          key: 'count',\n          value: state.ants.length,\n          min: 1,\n          max: 200\n        },\n        {\n          key: 'agility',\n          value: state.antSettings.agility,\n          min: 1,\n          max: 90\n        },\n        {\n          key: 'speed',\n          value: state.antSettings.speed,\n          min: 1,\n          max: 50\n        },\n        /*{\n          key: 'minSpeed',\n          label: 'minimum speed',\n          value: state.antSettings.minSpeed,\n          min: 1,\n          max: 50\n        },\n        {\n          key: 'maxSpeed',\n          label: 'maximum speed',\n          value: state.antSettings.maxSpeed,\n          min: 1,\n          max: 50\n        },*/\n        {\n          key: 'distancingRange',\n          label: 'distancing range',\n          value: state.antSettings.distancingRange,\n          min: 10,\n          max: 200,\n          step: 10\n        },\n        {\n          key: 'distancingFactor',\n          label: 'distancing factor',\n          value: state.antSettings.distancingFactor,\n          min: .1,\n          max: 4,\n          step: .1\n        }\n      ]}\n      update={(setting: string, value: number) => dispatch({\n        type: 'updateAntSetting',\n        setting: setting as AntSetting,\n        value\n      })}\n    />\n  </div>;\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}